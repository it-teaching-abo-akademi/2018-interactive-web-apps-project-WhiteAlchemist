{"version":3,"sources":["serviceWorker.js","components/stock.js","components/portfolio.js","components/board.js","components/main.js","index.js"],"names":["Boolean","window","location","hostname","match","Stock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isSelected","state","selected","setState","index","console","log","remove","deleteStock","name","unit_value","parseFloat","toFixed","quantity","total_value","react_default","a","createElement","type","onChange","React","Component","Portfolio","addStock","symbol","refs","stock_symbol","value","stocks_number","shares","Number","isInteger","axios","get","then","res","undefined","data","prices","price","arr","stocks","symbol_exists","parseInt","length","stock","push","alert","popup","style","display","sum","updateStorage","catch","error","changeToEuro","currency_symbol","innerHTML","lbleuro","background","lblusd","rate","changeToUSD","i","splice","storage","JSON","parse","localStorage","getItem","children","setItem","stringify","update","asyncToGenerator","regenerator_default","mark","_callee","_loop","b","wrap","_context","prev","next","stop","sleep","ms","Promise","resolve","setTimeout","deleteStocks","selectedItems","sort","close","graph","chart","stocksSum","s","total","deletePortfolio","indexOf","openGraph","drawGraph","_callee2","startDate","endDate","names","dates","values","_loop2","_i","_context2","start","end","abrupt","toString","arrDates","arrValues","Date","renderChart","renderNormal","className","onClick","ref","overflowX","border","map","eachStock","assertThisInitialized","id","placeholder","required","editing","history","text","key","less","greater","cols","c3","bindto","xs","columns","axis","x","tick","format","Board","add","portfolio_name","portfolios","portfolio","removePortfolio","c","init","components_portfolio","padding","bind","eachPortfolio","Main","content","board","ReactDOM","render","main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a44a765f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import  React from \"react\"\r\nimport \"./portfolio.css\"\r\n\r\nclass Stock extends  React.Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            name: this.props.name,\r\n            unit_value: parseFloat(this.props.unit_value).toFixed(2),\r\n            quantity: this.props.quantity,\r\n            total_value: parseFloat(this.props.quantity)*parseFloat(this.props.unit_value),\r\n            selected: false\r\n        }\r\n    }\r\n\r\n    isSelected = () =>\r\n    {\r\n        var isSelected = this.state.selected;\r\n\r\n        isSelected = !isSelected;\r\n        this.setState({selected: isSelected});\r\n        this.props.selected(this.props.index);\r\n        console.log(\"you selected me!\" + this.props.index + \" \" + isSelected)\r\n    };\r\n\r\n    remove = () =>\r\n    {\r\n        console.log(\"I am removing stock with index: \"+this.props.index);\r\n        this.props.deleteStock(this.props.index)\r\n\r\n    };\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <tr>\r\n                <td>{this.state.name}</td>\r\n                <td>{this.state.unit_value}</td>\r\n                <td>{this.state.quantity}</td>\r\n                <td>{this.state.total_value.toFixed(2)}</td>\r\n                <td><input type={'checkbox'} onChange={this.isSelected}/></td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stock;","import  React from \"react\"\r\nimport axios from \"axios\";\r\nimport Stock from \"./stock\"\r\nimport \"./portfolio.css\"\r\nimport \"../../node_modules/c3/c3.css\";\r\nimport * as c3 from \"c3\";\r\n\r\nclass Portfolio extends React.Component{\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        let sum = () =>\r\n        {\r\n            let stocksSum = 0.0;\r\n            let stocks = this.props.stocks;\r\n            console.log(stocks);\r\n            for(let s in stocks)\r\n            {\r\n                stocksSum = stocksSum + stocks[s]['unit_value']*stocks[s]['quantity']\r\n            }\r\n\r\n            return parseFloat(stocksSum).toFixed(2);\r\n        }\r\n\r\n        this.state =\r\n            {\r\n                editing: false,\r\n                selected: [],\r\n                stocks: this.props.stocks,\r\n                total: sum(),\r\n                history: []\r\n            }\r\n    }\r\n\r\n    addStock = () =>\r\n    {\r\n\r\n        let symbol = this.refs.stock_symbol.value\r\n        let stocks_number = this.refs.shares.value\r\n\r\n        if(!Number.isInteger(parseFloat(stocks_number)))\r\n        {\r\n            alert(\"Number of shares should be an integer!\")\r\n            return\r\n        }\r\n\r\n        if(symbol == \"\")\r\n        {\r\n            alert(\"Stock symbol cannot be left empty!\")\r\n            return\r\n        }\r\n\r\n        axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol='+symbol+'&apikey=YWH47VG0N6XC0JBI').then(\r\n            res => {\r\n\r\n                if (res.data['Error Message'] != undefined )\r\n                {\r\n                    alert(\"Unknown stock symbol!\")\r\n                    return\r\n                }\r\n\r\n                if (res.data['Note'] != undefined )\r\n                {\r\n                    alert(\"There was a problem with API!\")\r\n                    return\r\n                }\r\n\r\n                let prices = res.data['Time Series (Daily)']\r\n\r\n                let price = 0\r\n\r\n                // Here we take the latest price of the stock\r\n                for (let a in prices)\r\n                {\r\n                    price = prices[a]['4. close']\r\n                    console.log(price)\r\n                    break\r\n                }\r\n\r\n                var arr = this.state.stocks;\r\n\r\n                let symbol_exists = false;\r\n\r\n                for (let a in arr)\r\n                {\r\n                    if(arr[a]['name'] == symbol)\r\n                    {\r\n                        symbol_exists = true\r\n                        arr[a]['quantity'] = parseInt(arr[a]['quantity']) + parseInt(stocks_number)\r\n                    }\r\n                }\r\n\r\n                if (!symbol_exists && arr.length <= 50)\r\n                {\r\n\r\n                    let stock = {name: symbol, unit_value: price, quantity: stocks_number}\r\n                    arr.push(stock)\r\n                }\r\n                else if(arr.length > 50)\r\n                {\r\n                    alert(\"You cannot add more than 50 symbols in one portfolio!\")\r\n                    return\r\n                }\r\n\r\n                this.setState({stocks: arr})\r\n\r\n                this.refs.popup.style.display = \"none\";\r\n\r\n                this.sum()\r\n\r\n                this.updateStorage()\r\n\r\n            }).catch(error=>{alert(\"Unknown stock symbol!\")})\r\n    }\r\n    changeToEuro = () =>\r\n    {\r\n        if (this.refs.currency_symbol.innerHTML == '€')\r\n        {\r\n            this.refs.lbleuro.style.background = 'yellow'\r\n            this.refs.lblusd.style.background = 'lightgrey'\r\n        }\r\n        else\r\n        {\r\n            axios.get('https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=YWH47VG0N6XC0JBI').then(\r\n                res => {\r\n                    let rate = res.data['Realtime Currency Exchange Rate']['5. Exchange Rate']\r\n                    console.log(res.data['Realtime Currency Exchange Rate']['5. Exchange Rate'])\r\n                    var arr = this.state.stocks;\r\n                    for(let a in arr)\r\n                    {\r\n                        arr[a]['unit_value'] = parseFloat(arr[a]['unit_value']*rate).toFixed(2)\r\n                    }\r\n                    this.refs.currency_symbol.innerHTML = '€'\r\n                    this.setState({stocks: arr})\r\n                    console.log(this.state.stocks)\r\n                    this.sum()\r\n                    this.refs.lbleuro.style.background = 'yellow'\r\n                    this.refs.lblusd.style.background = 'lightgrey'\r\n\r\n                    this.setState({selected: []})\r\n                }).catch(error => {alert(\"Currency Exchange error!\")})\r\n        }\r\n\r\n    }\r\n\r\n    changeToUSD = () =>\r\n    {\r\n        if (this.refs.currency_symbol.innerHTML == '$')\r\n        {\r\n            this.refs.lbleuro.style.background = 'lightgrey'\r\n            this.refs.lblusd.style.background = 'yellow'\r\n        }\r\n        else\r\n        {\r\n            axios.get('https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=EUR&to_currency=USD&apikey=YWH47VG0N6XC0JBI').then(\r\n                res =>\r\n                {\r\n                    let rate = res.data['Realtime Currency Exchange Rate']['5. Exchange Rate']\r\n                    console.log(res.data['Realtime Currency Exchange Rate']['5. Exchange Rate'])\r\n                    var arr = this.state.stocks;\r\n                    for(let a in arr)\r\n                    {\r\n                        arr[a]['unit_value'] = parseFloat(arr[a]['unit_value']*rate).toFixed(2)\r\n\r\n                    }\r\n                    this.refs.currency_symbol.innerHTML = '$'\r\n                    this.setState({stocks: arr})\r\n                    console.log(this.state.stocks)\r\n                    this.sum()\r\n\r\n                    this.refs.lbleuro.style.background = 'lightgrey'\r\n                    this.refs.lblusd.style.background = 'yellow'\r\n\r\n                    this.setState({selected: []})\r\n                }).catch(error=>{alert(\"Currency Exchange error!\")})\r\n        }\r\n    }\r\n\r\n    deleteStock = (i) => {\r\n\r\n        console.log(\"Removing stock: \"+i);\r\n        var arr = this.state.stocks;\r\n        arr.splice(i,1);\r\n        this.setState({stocks: arr})\r\n\r\n    };\r\n\r\n    updateStorage = () =>\r\n    {\r\n        let storage = JSON.parse(localStorage.getItem('portfolios'))\r\n\r\n        for (let a in storage)\r\n        {\r\n            if (storage[a]['name'] == this.props.children)\r\n            {\r\n                storage[a]['stocks'] = this.state.stocks\r\n                break\r\n            }\r\n        }\r\n\r\n        localStorage.setItem('portfolios', JSON.stringify(storage))\r\n    }\r\n\r\n    update = async () =>\r\n    {\r\n        let arr = this.props.stocks\r\n\r\n        var stocks = this.props.stocks\r\n\r\n        this.setState({stocks: []})\r\n\r\n\r\n        for (let b in arr)\r\n        {\r\n            let symbol = arr[b]['name']\r\n\r\n            axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol='+symbol+'&apikey=YWH47VG0N6XC0JBI').then(\r\n                res => {\r\n\r\n\r\n                    if(res.data['Time Series (Daily)'] == undefined)\r\n                        throw true\r\n\r\n                    let prices = res.data['Time Series (Daily)']\r\n\r\n                    let price = 0\r\n                    // Here we take the latest price of the stock\r\n                    for (let a in prices)\r\n                    {\r\n                        price = prices[a]['4. close']\r\n                        console.log(price)\r\n                        break\r\n                    }\r\n\r\n                    arr[b]['unit_value'] = price\r\n\r\n                    this.sum()\r\n\r\n                    this.setState({stocks: arr})\r\n\r\n                    //await this.sleep(2000)\r\n\r\n                    this.updateStorage()\r\n\r\n                }).catch(error=>{//alert(\"Too many refreshes!\")\r\n                this.setState({stocks: stocks})\r\n\r\n            })\r\n        }\r\n\r\n\r\n        this.refs.currency_symbol.innerHTML = '$'\r\n        this.refs.lblusd.style.background = 'lightgrey'\r\n        this.refs.lbleuro.style.background = 'lightgrey'\r\n        this.setState({selected: []})\r\n\r\n\r\n\r\n    }\r\n    sleep = (ms) => {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    deleteStocks = () =>\r\n    {\r\n        let selectedItems = this.state.selected.sort();\r\n        console.log(\"this items to remove\");\r\n        console.log(selectedItems);\r\n        let stocks = this.state.stocks;\r\n\r\n        for (let a in selectedItems)\r\n        {\r\n            //stocks.splice(selectedItems[a]-a,1)\r\n            this.deleteStock(selectedItems[a]-a);\r\n            console.log(\"removed: \"+selectedItems[a])\r\n        }\r\n\r\n        this.updateStorage()\r\n        this.setState({selected: []})\r\n\r\n        this.sum()\r\n\r\n    }\r\n\r\n    close = () =>\r\n    {\r\n        this.refs.popup.style.display = \"none\";\r\n        this.refs.graph.style.display = \"none\";\r\n        this.refs.chart.innerHTML = \"\"\r\n    }\r\n\r\n\r\n    sum = () =>\r\n    {\r\n        let stocksSum = 0.0\r\n        let stocks = this.state.stocks\r\n        for(let s in stocks)\r\n        {\r\n            stocksSum = stocksSum + stocks[s]['unit_value']*stocks[s]['quantity']\r\n        }\r\n        this.setState({total: parseFloat(stocksSum).toFixed(2)});\r\n        console.log('total is: ' +this.state.total)\r\n    }\r\n\r\n    remove = () =>\r\n    {\r\n        this.props.deletePortfolio(this.props.index)\r\n    }\r\n\r\n    selected = (i) => {\r\n        let arr = this.state.selected\r\n\r\n        if (arr.indexOf(i) > -1)\r\n        {\r\n            arr.splice(arr.indexOf(i),1)\r\n        }\r\n        else\r\n             arr.push(i)\r\n\r\n        this.setState({selected: arr})\r\n    }\r\n\r\n    eachStock(text,i)\r\n    {\r\n        return (\r\n            <Stock key={text['name']+text['unit_value']+text['quantity']} index={i}\r\n                   name={text['name']} unit_value={text['unit_value']} quantity={text['quantity']}\r\n                   selected={this.selected} remove={this.deleteStock}>\r\n            </Stock>\r\n        )\r\n    }\r\n\r\n    popup = () =>\r\n    {\r\n        this.refs.popup.style.display = \"block\";\r\n    }\r\n\r\n    openGraph = () =>\r\n    {\r\n        this.refs.graph.style.display = \"block\";\r\n\r\n    }\r\n\r\n    drawGraph = async () =>\r\n    {\r\n        let selected = this.state.selected\r\n        let stocks = this.state.stocks\r\n\r\n        let startDate = this.refs.start.value\r\n        let endDate = this.refs.end.value\r\n\r\n\r\n        if(startDate == \"\" || endDate == \"\")\r\n        {\r\n            alert(\"Select start and end dates!\")\r\n            return\r\n        }\r\n\r\n        let names = []\r\n        for (let i in selected)\r\n            names[i] = stocks[selected[i]]['name']\r\n\r\n\r\n        let dates = []\r\n        let values = []\r\n        let data = {}\r\n\r\n        if(names.length == 0)\r\n            alert(\"No stocks were selected!\")\r\n\r\n\r\n        for( let i in names)\r\n        {\r\n            axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol='+names[i]+'&apikey=YWH47VG0N6XC0JBI').then(\r\n                res => {\r\n\r\n                    if (res.data['Time Series (Daily)'] == undefined)\r\n                        throw true\r\n                    let prices = res.data['Time Series (Daily)']\r\n\r\n                    let price = 0\r\n\r\n                    data[names[i].toString()] = i.toString()\r\n\r\n                    let arrDates = []\r\n                    let arrValues = []\r\n\r\n                    arrDates.push(i.toString())\r\n                    arrValues.push(names[i].toString())\r\n\r\n                    for (let a in prices)\r\n                    {\r\n                        if(new Date(a) >= new Date(startDate) && new Date(a) <= new Date(endDate))\r\n                        {\r\n                            arrDates.push(a)\r\n                            arrValues.push(prices[a][\"4. close\"])\r\n                        }\r\n                    }\r\n\r\n                    dates.push(arrDates)\r\n                    values.push(arrValues)\r\n\r\n                    this.renderChart(dates,values,data,startDate,endDate)\r\n                }).catch(error=>{alert(\"Too many requests!\")})\r\n        }\r\n    }\r\n\r\n    renderChart(dates,values,data,less,greater){\r\n        let cols = []\r\n\r\n        console.log(\"check dates \",dates)\r\n\r\n        for (let a in dates)\r\n        {\r\n            cols.push(dates[a])\r\n        }\r\n\r\n        for (let a in values)\r\n        {\r\n            cols.push(values[a])\r\n        }\r\n\r\n        console.log(\"This is json: \"+JSON.stringify(data))\r\n        console.log(\"This is cols: \"+JSON.stringify(cols))\r\n\r\n        var chart = c3.generate({\r\n            bindto: this.refs.chart,\r\n            data: {\r\n                xs: data,\r\n                columns: cols\r\n            },\r\n            axis: {\r\n                x: {\r\n                    type: 'timeseries',\r\n                    tick: {\r\n                        format: '%Y-%m-%d'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    renderNormal = () =>\r\n    {\r\n        const style = {\r\n            border_bottom: '1px solid #ddd'\r\n        };\r\n\r\n        return (\r\n            <div className={'portfolio'}>\r\n\r\n                <a  onClick={this.remove} className=\"close-thik\"></a>\r\n                <p/><p/><br/>\r\n\r\n                <div> {this.props.children}\r\n                    <div className={'divider'}></div>\r\n                    <label onClick={this.changeToEuro} ref=\"lbleuro\">Show in €</label>\r\n                    <div className={'divider'}></div>\r\n                    <label onClick={this.changeToUSD} ref='lblusd'>Show in $</label>\r\n                </div>\r\n                <p/>\r\n                <br/>\r\n                <div style={{overflowX: 'auto'}}>\r\n                <table style={{border: '1px solid black'}}>\r\n                    <tbody>\r\n                    <tr style={{border: '1px solid black'}}>\r\n                        <th>Name</th>\r\n                        <th>Unit value</th>\r\n                        <th>Quantity</th>\r\n                        <th>Total value</th>\r\n                        <th>Select</th>\r\n                    </tr>\r\n                    {\r\n                        this.state.stocks.map(this.eachStock, this)\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n                </div>\r\n                <p/>\r\n                <p>Total value of {this.props.children} is {this.state.total} <span ref='currency_symbol'>$</span></p>\r\n                <button onClick={this.popup}>Add Stock</button>\r\n                <div className={'divider'}></div>\r\n                <button onClick={this.openGraph}>Perf graph</button>\r\n                <div className={'divider'}></div>\r\n                <button onClick={this.deleteStocks}>Remove selected</button>\r\n                <div className={'divider'}></div>\r\n                <button onClick={this.update}>Update Portfolio</button>\r\n\r\n                <div ref='graph' className={'modal'}>\r\n                    <div className=\"modal-content\">\r\n                        <span ref={'close'} className=\"close\" onClick={this.close}>&times;</span>\r\n                        <h1>Stocks' value history</h1>\r\n                        <div id='chart' ref={'chart'}></div>\r\n                        <h6>Select dates</h6>\r\n                        <a>Start date:</a>\r\n                        <input type=\"date\" ref=\"start\"/>\r\n                        <div className={'divider'}/>\r\n                        <a>End date:</a>\r\n                        <input type=\"date\" ref=\"end\"/>\r\n                        <div className={'divider'}/>\r\n                        <button onClick={this.drawGraph}>Draw graph</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div ref=\"popup\" className=\"modal\">\r\n                    <div className=\"modal-content\">\r\n                        <span ref={'close'} className=\"close\" onClick={this.close}>&times;</span>\r\n                        <h1>Add Stock</h1>\r\n                        <table style={{border: '1px solid black'}}>\r\n                            <tbody>\r\n                            <tr style={{border: '1px solid black'}}>\r\n                                <td>Stock's symbol</td>\r\n                                <td> <input type=\"text\" placeholder=\"Stock's symbol\" ref='stock_symbol' required/></td>\r\n                            </tr>\r\n                            <tr style={{border: '1px solid black'}}>\r\n                                <td>Number of shares</td>\r\n                                <td><input type=\"number\" ref='shares' required/></td>\r\n                            </tr>\r\n                            <tr style={{border: '1px solid black'}}>\r\n                                <td><button type=\"button\" className=\"btn\" onClick={this.addStock}>Add Stock</button></td>\r\n                                <td></td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    render()\r\n    {\r\n            return this.renderNormal()\r\n    }\r\n}\r\n\r\nexport default Portfolio;","import React from \"react\";\r\nimport \"./portfolio.css\"\r\nimport Portfolio from \"./portfolio\"\r\nimport axios from \"axios\";\r\n\r\nclass Board extends  React.Component{\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        let init = []\r\n        if (localStorage.getItem('portfolios') == null)\r\n            localStorage.setItem('portfolios', JSON.stringify([]))\r\n        else\r\n            init = JSON.parse(localStorage.getItem('portfolios'))\r\n\r\n        this.state = {\r\n\r\n            portfolios: init\r\n        }\r\n    }\r\n\r\n    add = () =>\r\n    {\r\n        let name = this.refs.portfolio_name.value\r\n        this.refs.portfolio_name.value = \"\"\r\n        let portfolios = this.state.portfolios\r\n\r\n        if(name == '')\r\n        {\r\n            alert(\"Name of Portfolio should not be empty!\")\r\n            return\r\n        }\r\n\r\n        var arr = this.state.portfolios;\r\n\r\n        if(arr.length == 10)\r\n        {\r\n            alert(\"The maximum number of portfolios that can be created is 10!\")\r\n            return\r\n        }\r\n        for (let i in arr)\r\n        {\r\n            if (arr[i]['name'] == name)\r\n            {\r\n                alert(\"There is already a portfolio with this name!\")\r\n                return\r\n            }\r\n        }\r\n\r\n        var portfolio = {name: name, stocks: []};\r\n        arr.push(portfolio);\r\n        this.setState({portfolios: arr})\r\n        localStorage.setItem('portfolios', JSON.stringify(arr))\r\n    };\r\n\r\n    removePortfolio = (i) =>\r\n    {\r\n        console.log(\"Removing portfolio \"+i)\r\n        var arr = this.state.portfolios;\r\n        arr.splice(i,1)\r\n        this.setState({portfolios: arr})\r\n        localStorage.setItem('portfolios', JSON.stringify(arr))\r\n    }\r\n\r\n\r\n    eachPortfolio(text,i)\r\n    {\r\n        return (<Portfolio key={text['name']} index={i}\r\n                           deletePortfolio={this.removePortfolio}\r\n                           stocks={text['stocks']}\r\n        >{text['name']}</Portfolio>)\r\n    }\r\n\r\n\r\n    updateStorage = (name,stocks) =>\r\n    {\r\n        let storage = JSON.parse(localStorage.getItem('portfolios'))\r\n\r\n        for (let a in storage)\r\n        {\r\n            if (storage[a]['name'] == name)\r\n            {\r\n                storage[a]['stocks'] = stocks\r\n                break\r\n            }\r\n        }\r\n\r\n        localStorage.setItem('portfolios', JSON.stringify(storage))\r\n    }\r\n\r\n    update = async () =>\r\n    {\r\n        let arr = JSON.parse(localStorage.getItem('portfolios'))\r\n\r\n        for (let b in arr)\r\n        {\r\n            for (let c in b['stocks'])\r\n            {\r\n                let symbol = b['stocks'][c]['name']\r\n\r\n                axios.get('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol='+symbol+'&apikey=YWH47VG0N6XC0JBI').then(\r\n                    res => {\r\n\r\n\r\n                        if(res.data['Time Series (Daily)'] == undefined)\r\n                            throw true\r\n\r\n                        let prices = res.data['Time Series (Daily)']\r\n\r\n                        let price = 0\r\n                        // Here we take the latest price of the stock\r\n\r\n                        for (let a in prices)\r\n                        {\r\n                            price = prices[a]['4. close']\r\n                            console.log(price)\r\n                            break\r\n                        }\r\n\r\n                        b['stocks'][c]['unit_value'] = price\r\n\r\n                    }).catch(error=>{//alert(\"Too many refreshes!\")\r\n                })\r\n\r\n            }\r\n            this.updateStorage(arr[b]['name'],b['stocks'])\r\n        }\r\n\r\n       // this.setState({selected: []})\r\n    }\r\n\r\n\r\n    render ()\r\n    {\r\n        if (localStorage.getItem('portfolios') != \"[]\")\r\n            return (\r\n                <div style={{padding: '2%'}}>\r\n                    <div className={'head'}>\r\n                        <div style={{overflowX: \"auto\"}}>\r\n                        <table className={'table'}>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>Portfolio Name:</td><td><input type={'text'} ref='portfolio_name'/></td>\r\n                                <td><button onClick={this.add.bind(null)}>Add new portfolio</button></td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        this.state.portfolios.map(this.eachPortfolio,this)\r\n                    }\r\n                </div>\r\n            )\r\n        else\r\n            return(\r\n                <div style={{padding: '2%'}}>\r\n                    <div className={'head'}>\r\n                        <table className={'table'}>\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>Portfolio Name:</td><td><input type={'text'} ref='portfolio_name' className={'input-res'}/></td>\r\n                                <td><button onClick={this.add.bind(null)}>Add new portfolio</button></td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <h2 style={{padding: '2%'}}>No portfolio is currently stored!</h2>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from \"react\";\nimport \"./portfolio.css\"\nimport Board from \"./board\"\n\nclass Main extends React.Component {\n\n  render() {\n    return (\n        <div>\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n            <Board/>\n        </div>\n              );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Main from \"./components/main\";\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}